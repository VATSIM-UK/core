name: Deploy

on:
  push:
    branches:
      - main
  repository_dispatch:
    types: [manual-trigger]
    #types: [manual-trigger, deploy-trigger]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Codes
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.client_payload.ref }}

      - name: Extract short commit hash
        run: |
          echo "::set-env name=COMMIT::$(echo ${GITHUB_SHA} | cut -c1-7)"

      - name: Extract tag
        run: |
          echo "::set-env name=TAG::$(git describe --tags --abbrev=0)"

      #
      # DEPLOYMENT PARAMETERS
      #
      - name: Set additional deployment variables
        uses: allenevans/set-env@v1.0.0
        with:
          APP_URL: https://www.vatsim.uk
          APPLICATION_ROOT: ${{ secrets.APPLICATION_ROOT }}
          RELEASE_DIRECTORY: ${{ secrets.APPLICATION_ROOT }}/releases/${{ env.COMMIT }}
          SHARED_DIRECTORY: ${{ secrets.APPLICATION_ROOT }}/shared
          PHP_PATH: /bin/php74
          VERSIONS_TO_KEEP: 5

      #
      # DISCORD NOTIFICATION JOB START
      #
      - name: Discord Notification (Start)
        uses: rjstone/discord-webhook-notify@v1
        with:
            severity: warn
            description: ${{ format('Starting Deployment of **{0}**', github.repository) }}
            details: >
              ${{ format(':rocket: Starting Deployment of commit `{0}` by :technologist: *{1}* to **Production** ({2})', env.COMMIT, github.actor, env.APP_URL) }}
            footer: ${{ format('https://{0}/actions/runs/{1}', github.repository, github.run_id) }}
            webhookUrl: ${{ secrets.ACTIONS_DISCORD_WEBHOOK }}

      #
      # GITHUB DEPLOYMENT JOB START
      #
      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub Deployment
        id: github_deployment
        with:
          token: ${{ github.token }}
          target_url: https://www.vatsim.uk
          environment: production
          ref: ${{ github.event.client_payload.ref }}

      #
      # BUILD DEPENDENCIES SETUP
      #

      - name: Setup Yarn
        uses: actions/setup-node@v1
        with:
          node-version: '12'

      #
      # YARN BUILD
      # Install node_modules and run webpack
      #

      # Restore Caches
      - name: Get Yarn Cache Directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Restore Yarn Cache
        uses: actions/cache@v1
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Install node_modules
      - name: Install Core assets
        run: yarn

      - name: Install Waiting Lists Manager assets
        run: cd nova-components/WaitingListsManager && yarn && cd ../../

      # Run Webpack
      - name: Compile Core assets
        run: yarn run prod

      - name: Compile Waiting Lists Manager assets
        run: cd nova-components/WaitingListsManager && yarn run prod && cd ../../

      #
      # CONFIGURATION FILES
      # Create any configuration files, interpolating secrets
      #
      - name: Create Nova authentication file
        env:
          NOVA_USERNAME: ${{ secrets.NOVA_USERNAME }}
          NOVA_PASSWORD: ${{ secrets.NOVA_PASSWORD }}
        run: |
          cp auth.json.example auth.json
          sed -i "s/your-username/${NOVA_USERNAME}/g" auth.json
          sed -i "s/your-password/${NOVA_PASSWORD}/g" auth.json
      
      - name: Create .env from Secrets value
        env:
          ENV_FILE_CONTENTS: ${{ secrets.ENV_FILE_CONTENTS }}
        run: 'echo "$ENV_FILE_CONTENTS" > .env'

      - name: Update BUGSNAG_APP_VERSION
        run: 'sed -i "s/^BUGSNAG_APP_VERSION.*$/BUGSNAG_APP_VERSION=$TAG/" .env'

      # - name: Create .env from example configuration
      #   run: cp .env.example .env

      # - name: Populate .env
      #   env:
      #     APP_ENV: production
      #     APP_DEBUG: false
      #     APP_DEBUGBAR: false
      #     APP_KEY: ${{ secrets.APP_KEY }}
      #     APP_URL: ${{ env.APP_URL }}
      #     BUGSNAG_APP_VERSION: ${{ env.VERSION }}
      #     BUGSNAG_API_KEY: ${{ secrets.BUGSNAG_API_KEY }}
      #     REDIS_HOST: ${{ secrets.REDIS_HOST }}
      #     REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      #     SESSION_DOMAIN: .vatsim.uk
      #     DB_MYSQL_HOST: ${{ secrets.DB_MYSQL_HOST }}
      #     DB_MYSQL_PORT: ${{ secrets.DB_MYSQL_PORT }}
      #     DB_MYSQL_USER: ${{ secrets.DB_MYSQL_USER }}
      #     DB_MYSQL_PASS: ${{ secrets.DB_MYSQL_PASS }}
      #     DB_MYSQL_NAME: ${{ secrets.DB_MYSQL_NAME }}
      #     COMMUNITY_DATABASE: ${{ secrets.COMMUNITY_DATABASE }}
      #     CTS_DATABASE: ${{ secrets.CTS_DATABASE }}
      #     HELPDESK_DATABASE: ${{ secrets.HELPDESK_DATABASE }}
      #     MOODLE_DATABASE: ${{ secrets.MOODLE_DATABASE }}
      #     TS_HOST: ${{ secrets.TS_HOST }}
      #     TS_USER: ${{ secrets.TS_USER }}
      #     TS_PASS: ${{ secrets.TS_PASS }}
      #     TS_PORT: ${{ secrets.TS_PORT }}
      #     TS_QUERY_PORT: ${{ secrets.TS_QUERY_PORT }}
      #     MAIL_FROM_ADDRESS: no-reply@vatsim.uk
      #     MAIL_FROM_NAME: "VATSIM UK"
      #     MAIL_HOST: ${{ secrets.MAIL_HOST }}
      #     MAIL_PORT: ${{ secrets.MAIL_PORT }}
      #     MAIL_USER: ${{ secrets.MAIL_USER }}
      #     MAIL_PASS: ${{ secrets.MAIL_PASS }}
      #     DISCORD_INVITE_URL: ${{ secrets.DISCORD_INVITE_URL }}
      #     DISCORD_CLIENT: ${{ secrets.DISCORD_CLIENT }}
      #     DISCORD_SECRET: ${{ secrets.DISCORD_SECRET }}
      #     DISCORD_REDIRECT_URI: ${{ secrets.DISCORD_REDIRECT_URI }}
      #     DISCORD_GUILD_ID: ${{ secrets.DISCORD_GUILD_ID }}
      #     DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
      #     VATSIM_CERT_AT_USER: ${{ secrets.VATSIM_CERT_AT_USER }}
      #     VATSIM_CERT_AT_PASS: ${{ secrets.VATSIM_CERT_AT_PASS }}
      #     VATSIM_CERT_AT_DIV: ${{ secrets.VATSIM_CERT_AT_DIV }}
      #     SSO_CERT: ${{ secrets.SSO_CERT }}
      #     SSO_KEY: ${{ secrets.SSO_KEY }}
      #     SSO_SECRET: ${{ secrets.SSO_SECRET }}
      #     MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}
      #     COMMUNITY_INIT_FILE: ${{ secrets.COMMUNITY_INIT_FILE }}
      #     IPBOARD_API_URL: https://community.vatsim.uk/api
      #     IPBOARD_API_KEY: ${{ secrets.IPBOARD_API_KEY }}
      #     IPBOARD_API_REFERENCE_NAME: ${{ secrets.IPBOARD_API_REFERENCE_NAME }}
      #     UKCP_URL: https://ukcp.vatsim.uk
      #     UKCP_KEY: ${{ secrets.UKCP_KEY }}
      #     CHARTFOX_PUBLIC_TOKEN: ${{ secrets.CHARTFOX_PUBLIC_TOKEN }}

      #   run: |
      #     env | while IFS='=' read key value; do
      #         sed -i "s@\(^$key=\)\(.*\)@\1${value}@" .env
      #     done

      #
      # DEPLOYMENT
      # Prepare remote environment and deploy application
      #

      - name: Deploy application
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "."
          target: ${{ env.RELEASE_DIRECTORY }}

      #
      # REMOTE POST-DEPLOYMENT ACTIONS
      # Conduct server-side post-deployment tasks and make application version live.
      #
      - name: (Remote) Install composer dependencies
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER}}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Ensure we're working from the current release
            cd $RELEASE_DIRECTORY

            # Install application dependencies
            $PHP_PATH /usr/local/bin/composer install --optimize-autoloader --no-dev

            # Install Waiting List Dependencies
            $PHP_PATH /usr/local/bin/composer install --working-dir="$RELEASE_DIRECTORY/nova-components/WaitingListsManager" --no-dev

            # Install Nova
            $PHP_PATH artisan nova:install
          envs: RELEASE_DIRECTORY,PHP_PATH

      - name: (Remote) Update symbolic links
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER}}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            if [ ! -d "$SHARED_DIRECTORY/storage" ]; then
              mkdir -p $SHARED_DIRECTORY/storage
              mv $RELEASE_DIRECTORY/storage/* $SHARED_DIRECTORY/storage/
              chmod -R 775 $SHARED_DIRECTORY/storage
            fi

            rm -rf $RELEASE_DIRECTORY/storage
            ln -s $SHARED_DIRECTORY/storage $RELEASE_DIRECTORY/storage

            # Update Permissions on Application Directories
            chmod -R u+rwX,g+rwX,o-rwx $SHARED_DIRECTORY
            chmod -R u+rwX,g+rwX,o-rwx $RELEASE_DIRECTORY

            # Update the current link to point to this release
            ln -sfn $RELEASE_DIRECTORY $APPLICATION_ROOT/current
          envs: RELEASE_DIRECTORY,SHARED_DIRECTORY,APPLICATION_ROOT

      - name: (Remote) Post-deployment actions
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER}}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Ensure we're working from the new release
            cd $RELEASE_DIRECTORY

            # Stop Application / Services
            sudo systemctl stop teamspeak-daemon
            $PHP_PATH artisan down
            sudo systemctl stop core-horizon

            # Deployment Tasks
            $PHP_PATH artisan migrate --step --force -n
            $PHP_PATH artisan route:cache
            $PHP_PATH artisan view:clear
            $PHP_PATH artisan storage:link
            $PHP_PATH artisan telescope:publish
            $PHP_PATH artisan horizon:publish
            mv storage/logs/laravel.log storage/logs/laravel.log.`date +%s`; true

            # Start Applications / Services
            $PHP_PATH artisan up

            # This will interpolate the values as --revision="vx.y.z" and --repository="vatsim-uk/core"
            echo artisan bugsnag:deploy --branch="main" --revision="$TAG" --repository="$GITHUB_REPOSITORY"
            sudo systemctl start core-horizon
            sudo systemctl start teamspeak-daemon
          envs: RELEASE_DIRECTORY,PHP_PATH,TAG,GITHUB_REPOSITORY

      #
      # HOUSEKEEPING
      # Perform post-deployment housekeeping actions (release history)
      #
      - name: Housekeeping
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER}}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Ensure we're only keeping the desired number of versions in history

            # Releases are extracted by an array ordered by directory
            # creation date.
            releases=($(ls -tU $APPLICATION_ROOT/releases))
            number_of_releases=${#releases[@]}

            if [ "$number_of_releases" -gt "$VERSIONS_TO_KEEP " ]; then
              for i in $(seq 0 `expr $number_of_releases - $VERSIONS_TO_KEEP - 1`);
              do
                echo "Removing: ${releases[$i]}"
                rm -rf $APPLICATION_ROOT/releases/${releases[$i]}
              done
            fi
          envs: APPLICATION_ROOT,VERSIONS_TO_KEEP

      #
      # GITHUB DEPLOYMENT JOB END
      #
      - name: Update Deployment Status (Failed)
        if: failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ github.token }}
          target_url: https://www.vatsim.uk
          state: "failure"
          deployment_id: ${{ steps.github_deployment.outputs.deployment_id }}

      - name: Update Deployment Status (Success)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ github.token }}
          target_url: https://www.vatsim.uk
          state: "success"
          deployment_id: ${{ steps.github_deployment.outputs.deployment_id }}

      #
      # DISCORD NOTIFICATIONS JOB END
      #
      - name: Discord Notification (Failed)
        if: failure()
        uses: rjstone/discord-webhook-notify@v1
        with:
            severity: error
            description: ${{ format('Deployment **FAILED** of **{0}**', github.repository) }}
            details: >
              ${{ format(':fire: Deployment **FAILED** for commit `{0}` by :technologist: *{1}* to **Production** ({2})', env.COMMIT, github.actor, env.APP_URL) }}
            footer: ${{ format('https://github.com/{1}/actions/runs/{2}', github.repository, github.run_id) }}
            webhookUrl: ${{ secrets.ACTIONS_DISCORD_WEBHOOK }}

      - name: Discord Notification (Success)
        if: success()
        uses: rjstone/discord-webhook-notify@v1
        with:
            severity: info
            description: ${{ format('Deployment **SUCCEEDED** of **{0}**', github.repository) }}
            details: >
              ${{ format(':white_check_mark: Deployment **SUCCEEDED** for commit `{0}` by :technologist: *{1}* to **Production** ({2})', env.COMMIT, github.actor, env.APP_URL) }}
            footer: ${{ format('https://github.com/{0}/actions/runs/{1}', github.repository, github.run_id) }}
            webhookUrl: ${{ secrets.ACTIONS_DISCORD_WEBHOOK }}
